apiVersion: v1
data:
  app.py: |
        from flask import Flask, request, render_template_string
        from sqlalchemy import create_engine, text
        from sqlalchemy.exc import SQLAlchemyError

        app = Flask(__name__)

        html_form = '''
            <!doctype html>
            <html>
                <head>
                    <title>Connexion à la base de données MySQL</title>
                </head>
                <body>
                    <h2>Connexion à la base de données MySQL</h2>
                    <form method="POST">
                        Database: <input type="text" name="database"><br><br>
                        User: <input type="text" name="user"><br><br>
                        Mot de passe: <input type="password" name="password"><br><br>
                        Hôte: <input type="text" name="host"><br><br>
                        Port: <input type="text" name="port"><br><br>
                        <input type="submit" value="Se connecter">
                    </form>
                    <h3>{{ message }}</h3>
                </body>
            </html>
        '''

        @app.route('/', methods=['GET', 'POST'])
        def connect_db():
            message = ''
            if request.method == 'POST':
                database = request.form['database']
                user = request.form['user']
                password = request.form['password']
                host = request.form['host']
                port = request.form['port']

                db_uri = f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}'
                engine = create_engine(db_uri)

                try:
                    # Essayer de se connecter à la base de données
                    with engine.connect() as connection:
                        connection.execute(text('SELECT 1'))
                    message = 'Connexion réussie à la base de données MySQL !'
                except SQLAlchemyError as e:
                    message = f'Erreur lors de la connexion à la base de données : {e}'

            return render_template_string(html_form, message=message)

        if __name__ == '__main__':
            app.run(debug=True)

kind: ConfigMap
metadata:
  creationTimestamp: null
  name: python
